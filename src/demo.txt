"use client"

import { useState, useMemo, useCallback } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Area, AreaChart, Bar, BarChart, Line, LineChart, ResponsiveContainer, XAxis, YAxis } from "recharts"
import { ArrowDownIcon, ArrowUpIcon, BookOpenIcon, GraduationCapIcon, TrendingUpIcon, SearchIcon, DownloadIcon, FilterIcon, BellIcon } from 'lucide-react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"

// Updated mock data for Classes 7 to 12
const classData = {
  7: { students: 120, averageScore: 78 },
  8: { students: 125, averageScore: 80 },
  9: { students: 130, averageScore: 81 },
  10: { groups: ['Science', 'Commerce', 'Arts'], students: 150, averageScore: 82 },
  11: { groups: ['Science', 'Commerce', 'Arts'], students: 130, averageScore: 79 },
  12: { groups: ['Science', 'Commerce', 'Arts'], students: 120, averageScore: 85 },
}

const groupPerformanceData = [
  { group: 'Science', class10: 85, class11: 82, class12: 88 },
  { group: 'Commerce', class10: 80, class11: 78, class12: 83 },
  { group: 'Arts', class10: 82, class11: 77, class12: 84 },
]

const classTrendData = [
  { month: 'Jan', class7: 75, class8: 76, class9: 77, class10: 78, class11: 75, class12: 82 },
  { month: 'Feb', class7: 76, class8: 77, class9: 78, class10: 80, class11: 76, class12: 83 },
  { month: 'Mar', class7: 77, class8: 78, class9: 79, class10: 82, class11: 78, class12: 85 },
  { month: 'Apr', class7: 76, class8: 77, class9: 78, class10: 81, class11: 77, class12: 84 },
  { month: 'May', class7: 78, class8: 79, class9: 80, class10: 83, class11: 79, class12: 86 },
  { month: 'Jun', class7: 79, class8: 80, class9: 81, class10: 85, class11: 80, class12: 88 },
]

// Existing mock data
const studentGrowthData = [
  { month: 'Jan', growth: 2 },
  { month: 'Feb', growth: 3 },
  { month: 'Mar', growth: 5 },
  { month: 'Apr', growth: 4 },
  { month: 'May', growth: 7 },
  { month: 'Jun', growth: 6 },
]

const averageMarksData = [
  { subject: 'Math', current: 85, previous: 82 },
  { subject: 'Science', current: 78, previous: 80 },
  { subject: 'English', current: 82, previous: 79 },
  { subject: 'History', current: 76, previous: 75 },
  { subject: 'Art', current: 90, previous: 88 },
]

const subjectPerformanceData = [
  { subject: 'Math', score: 85 },
  { subject: 'Science', score: 78 },
  { subject: 'English', score: 82 },
  { subject: 'History', score: 76 },
  { subject: 'Art', score: 90 },
]

const mockStudents = [
  { id: 1, name: "Alice Johnson", grade: "A", class: 10, group: "Science", averageScore: 92, subjects: { Math: 95, Science: 88, English: 90, History: 89, Art: 98 } },
  { id: 2, name: "Bob Smith", grade: "B", class: 11, group: "Commerce", averageScore: 85, subjects: { Math: 82, Science: 85, English: 88, History: 80, Art: 90 } },
  { id: 3, name: "Charlie Brown", grade: "C", class: 8, averageScore: 78, subjects: { Math: 75, Science: 80, English: 76, History: 78, Art: 81 } },
  { id: 4, name: "Diana Ross", grade: "A", class: 12, group: "Arts", averageScore: 95, subjects: { Math: 98, Science: 92, English: 95, History: 93, Art: 97 } },
  { id: 5, name: "Ethan Hunt", grade: "B", class: 9, averageScore: 88, subjects: { Math: 85, Science: 90, English: 87, History: 86, Art: 92 } },
]

export default function AdminResultsPage() {
  const [dateRange, setDateRange] = useState('This Month')
  const [chartType, setChartType] = useState('bar')
  const [searchTerm, setSearchTerm] = useState('')
  const [gradeFilter, setGradeFilter] = useState('All')
  const [classFilter, setClassFilter] = useState('All')
  const [groupFilter, setGroupFilter] = useState('All')
  const [scoreRange, setScoreRange] = useState([0, 100])
  const [selectedStudent, setSelectedStudent] = useState(null)
  const [comparisonStudents, setComparisonStudents] = useState([])
  const [selectedClass, setSelectedClass] = useState('7')
  
  const currentAverage = averageMarksData.reduce((sum, subject) => sum + subject.current, 0) / averageMarksData.length
  const previousAverage = averageMarksData.reduce((sum, subject) => sum + subject.previous, 0) / averageMarksData.length
  const growthPercentage = ((currentAverage - previousAverage) / previousAverage) * 100

  const filteredStudents = useMemo(() => {
    return mockStudents.filter(student => 
      student.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (gradeFilter === 'All' || student.grade === gradeFilter) &&
      (classFilter === 'All' || student.class.toString() === classFilter) &&
      (groupFilter === 'All' || student.group === groupFilter || student.class < 10) &&
      student.averageScore >= scoreRange[0] && student.averageScore <= scoreRange[1]
    )
  }, [searchTerm, gradeFilter, classFilter, groupFilter, scoreRange])

  const renderChart = () => {
    switch(chartType) {
      case 'bar':
        return (
          <BarChart data={averageMarksData}>
            <XAxis dataKey="subject" stroke="#888888" />
            <YAxis stroke="#888888" />
            <ChartTooltip content={<ChartTooltipContent />} />
            <Bar dataKey="current" fill="#82ca9d" />
            <Bar dataKey="previous" fill="#8884d8" />
          </BarChart>
        )
      case 'line':
        return (
          <LineChart data={averageMarksData}>
            <XAxis dataKey="subject" stroke="#888888" />
            <YAxis stroke="#888888" />
            <ChartTooltip content={<ChartTooltipContent />} />
            <Line type="monotone" dataKey="current" stroke="#82ca9d" />
            <Line type="monotone" dataKey="previous" stroke="#8884d8" />
          </LineChart>
        )
      case 'area':
        return (
          <AreaChart data={averageMarksData}>
            <XAxis dataKey="subject" stroke="#888888" />
            <YAxis stroke="#888888" />
            <ChartTooltip content={<ChartTooltipContent />} />
            <Area type="monotone" dataKey="current" fill="#82ca9d" stroke="#82ca9d" />
            <Area type="monotone" dataKey="previous" fill="#8884d8" stroke="#8884d8" />
          </AreaChart>
        )
      default:
        return null
    }
  }

  const handleDownload = (format) => {
    // Placeholder for download functionality
    console.log(`Downloading report in ${format} format`)
    // In a real application, this would trigger a backend request to generate and serve the file
  }

  const handleCompareStudents = () => {
    // Placeholder for comparison functionality
    console.log('Comparing students:', comparisonStudents)
    // In a real application, this would open a modal or navigate to a comparison view
  }

  const performanceInsights = useMemo(() => {
    // Placeholder for AI-generated insights
    return [
      "Overall student performance has improved by 5% compared to last month.",
      "Math scores show the highest improvement, with a 7% increase.",
      "20% of students have shown significant progress in their weakest subject.",
      "Attention needed: Science scores have slightly declined for grade B students."
    ]
  }, [])

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900">
      <div className="container mx-auto p-4 sm:p-6 lg:p-8">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
          <h1 className="text-3xl sm:text-4xl font-bold text-gray-800 dark:text-white">Student Results Dashboard</h1>
          <div className="flex space-x-2">
            <Select value={dateRange} onValueChange={setDateRange}>
              <SelectTrigger className="w-[180px] bg-white dark:bg-gray-700">
                <SelectValue placeholder="Select date range" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="This Month">This Month</SelectItem>
                <SelectItem value="Last 3 Months">Last 3 Months</SelectItem>
                <SelectItem value="This Year">This Year</SelectItem>
              </SelectContent>
            </Select>
            <Button onClick={() => handleDownload('pdf')} className="bg-blue-500 hover:bg-blue-600">
              <DownloadIcon className="w-4 h-4 mr-2" />
              PDF
            </Button>
            <Button onClick={() => handleDownload('csv')} className="bg-green-500 hover:bg-green-600">
              <DownloadIcon className="w-4 h-4 mr-2" />
              CSV
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
          <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="flex flex-row items-center space-x-2">
              <BookOpenIcon className="w-8 h-8 text-blue-500" />
              <div>
                <CardTitle>Average Marks</CardTitle>
                <CardDescription>Current vs Previous Month</CardDescription>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-blue-600">{currentAverage.toFixed(1)}%</div>
              <p className="text-sm mt-2">
                {growthPercentage > 0 ? (
                  <span className="text-green-600 flex items-center">
                    <ArrowUpIcon className="w-4 h-4 mr-1" />
                    {growthPercentage.toFixed(1)}% increase
                  </span>
                ) : (
                  <span className="text-red-600 flex items-center">
                    <ArrowDownIcon className="w-4 h-4 mr-1" />
                    {Math.abs(growthPercentage).toFixed(1)}% decrease
                  </span>
                )}
              </p>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="flex flex-row items-center space-x-2">
              <GraduationCapIcon className="w-8 h-8 text-green-500" />
              <div>
                <CardTitle>Total Students</CardTitle>
                <CardDescription>Enrolled this month</CardDescription>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-green-600">1,234</div>
              <p className="text-sm mt-2">
                <span className="text-green-600 flex items-center">
                  <ArrowUpIcon className="w-4 h-4 mr-1" />
                  5.2% increase from last month
                </span>
              </p>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="flex flex-row items-center space-x-2">
              <TrendingUpIcon className="w-8 h-8 text-purple-500" />
              <div>
                <CardTitle>Top Performing Subject</CardTitle>
                <CardDescription>Based on average scores</CardDescription>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-purple-600">Art</div>
              <p className="text-sm mt-2">90% average score</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 gap-6 mb-6">
          <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-xl font-semibold">Student Growth Trend</CardTitle>
              <CardDescription>Performance improvement over time</CardDescription>
            </CardHeader>
            <CardContent>
              <ChartContainer config={{
                growth: {
                  label: "Growth",
                  color: "hsl(var(--chart-1))",
                },
              }} className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={studentGrowthData}>
                    <XAxis dataKey="month" stroke="#888888" />
                    <YAxis stroke="#888888" />
                    <ChartTooltip content={<ChartTooltipContent />} />
                    <Area type="monotone" dataKey="growth" stroke="#8884d8" fill="#8884d8" fillOpacity={0.2} />
                  </AreaChart>
                </ResponsiveContainer>
              </ChartContainer>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle className="text-xl font-semibold">Average Marks Comparison</CardTitle>
                  <CardDescription>Current vs Previous Month</CardDescription>
                </div>
                <Select value={chartType} onValueChange={setChartType}>
                  <SelectTrigger className="w-[120px]">
                    <SelectValue placeholder="Chart Type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bar">Bar Chart</SelectItem>
                    <SelectItem value="line">Line Chart</SelectItem>
                    <SelectItem value="area">Area Chart</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardHeader>
            <CardContent>
              <ChartContainer config={{
                current: {
                  label: "Current Month",
                  color: "hsl(var(--chart-1))",
                },
                previous: {
                  label: "Previous Month",
                  color: "hsl(var(--chart-2))",
                },
              }} className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  {renderChart()}
                </ResponsiveContainer>
              </ChartContainer>
            </CardContent>
          </Card>
        </div>

        <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
          <CardHeader>
            <CardTitle className="text-xl font-semibold">Performance Insights</CardTitle>
            <CardDescription>AI-generated analysis of student performance</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {performanceInsights.map((insight, index) => (
                <Alert key={index}>
                  <AlertTitle>Insight {index + 1}</AlertTitle>
                  <AlertDescription>{insight}</AlertDescription>
                </Alert>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
          <CardHeader>
            <CardTitle className="text-xl font-semibold">Class and Group Performance</CardTitle>
            <CardDescription>Comparison across classes and groups</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="classTrend" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="classTrend">Class Trend</TabsTrigger>
                <TabsTrigger value="groupComparison">Group Comparison</TabsTrigger>
              </TabsList>
              <TabsContent value="classTrend">
                <ChartContainer config={{
                  class7: { label: "Class 7", color: "hsl(var(--chart-1))" },
                  class8: { label: "Class 8", color: "hsl(var(--chart-2))" },
                  class9: { label: "Class 9", color: "hsl(var(--chart-3))" },
                  class10: { label: "Class 10", color: "hsl(var(--chart-4))" },
                  class11: { label: "Class 11", color: "hsl(var(--chart-5))" },
                  class12: { label: "Class 12", color: "hsl(var(--chart-6))" },
                }} className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={classTrendData}>
                      <XAxis dataKey="month" stroke="#888888" />
                      <YAxis stroke="#888888" />
                      <ChartTooltip content={<ChartTooltipContent />} />
                      <Line type="monotone" dataKey="class7" stroke="var(--color-class7)" strokeWidth={2} />
                      <Line type="monotone" dataKey="class8" stroke="var(--color-class8)" strokeWidth={2} />
                      <Line type="monotone" dataKey="class9" stroke="var(--color-class9)" strokeWidth={2} />
                      <Line type="monotone" dataKey="class10" stroke="var(--color-class10)" strokeWidth={2} />
                      <Line type="monotone" dataKey="class11" stroke="var(--color-class11)" strokeWidth={2} />
                      <Line type="monotone" dataKey="class12" stroke="var(--color-class12)" strokeWidth={2} />
                    </LineChart>
                  </ResponsiveContainer>
                </ChartContainer>
              </TabsContent>
              <TabsContent value="groupComparison">
                <ChartContainer config={{
                  class10: { label: "Class 10", color: "hsl(var(--chart-1))" },
                  class11: { label: "Class 11", color: "hsl(var(--chart-2))" },
                  class12: { label: "Class 12", color: "hsl(var(--chart-3))" },
                }} className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={groupPerformanceData}>
                      <XAxis dataKey="group" stroke="#888888" />
                      <YAxis stroke="#888888" />
                      <ChartTooltip content={<ChartTooltipContent />} />
                      <Bar dataKey="class10" fill="var(--color-class10)" />
                      <Bar dataKey="class11" fill="var(--color-class11)" />
                      <Bar dataKey="class12" fill="var(--color-class12)" />
                    </BarChart>
                  </ResponsiveContainer>
                </ChartContainer>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
          <CardHeader>
            <CardTitle className="text-xl font-semibold">Class-Level Overview</CardTitle>
            <CardDescription>Performance summary for each class</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="7" className="w-full">
              <ScrollArea className="w-full whitespace-nowrap">
                <TabsList className="inline-flex w-full justify-start">
                  {Object.keys(classData).map((classNum) => (
                    <TabsTrigger key={classNum} value={classNum}>Class {classNum}</TabsTrigger>
                  ))}
                </TabsList>
              </ScrollArea>
              {Object.entries(classData).map(([classNum, data]) => (
                <TabsContent key={classNum} value={classNum}>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Card>
                      <CardHeader>
                        <CardTitle>Total Students</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-2xl font-bold">{data.students}</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardHeader>
                        <CardTitle>Average Score</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-2xl font-bold">{data.averageScore}%</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardHeader>
                        <CardTitle>Groups</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex flex-wrap gap-2">
                          {data.groups ? (
                            data.groups.map((group) => (
                              <Badge key={group} variant="secondary">{group}</Badge>
                            ))
                          ) : (
                            <p>No groups for this class</p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>
              ))}
            </Tabs>
          </CardContent>
        </Card>

        <Card className="bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-shadow duration-300">
          <CardHeader>
            <CardTitle className="text-xl font-semibold">Student Performance</CardTitle>
            <CardDescription>Individual student results</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-4 mb-4">
              <div className="flex-1 min-w-[200px]">
                <Input
                  type="text"
                  placeholder="Search students..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full"
                />
              </div>
              <Select value={gradeFilter} onValueChange={setGradeFilter}>
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder="Filter by Grade" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="All">All Grades</SelectItem>
                  <SelectItem value="A">Grade A</SelectItem>
                  <SelectItem value="B">Grade B</SelectItem>
                  <SelectItem value="C">Grade C</SelectItem>
                </SelectContent>
              </Select>
              <Select value={classFilter} onValueChange={setClassFilter}>
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder="Filter by Class" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="All">All Classes</SelectItem>
                  {Object.keys(classData).map((classNum) => (
                    <SelectItem key={classNum} value={classNum}>Class {classNum}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select value={groupFilter} onValueChange={setGroupFilter}>
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder="Filter by Group" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="All">All Groups</SelectItem>
                  <SelectItem value="Science">Science</SelectItem>
                  <SelectItem value="Commerce">Commerce</SelectItem>
                  <SelectItem value="Arts">Arts</SelectItem>
                </SelectContent>
              </Select>
              <div className="flex-1 min-w-[200px]">
                <Slider
                  min={0}
                  max={100}
                  step={1}
                  value={scoreRange}
                  onValueChange={setScoreRange}
                  className="w-full"
                />
                <div className="text-sm text-gray-500 mt-1">
                  Score Range: {scoreRange[0]} - {scoreRange[1]}
                </div>
              </div>
            </div>
            <ScrollArea className="h-[400px] w-full">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="px-4 py-2 text-left">Name</th>
                    <th className="px-4 py-2 text-left">Grade</th>
                    <th className="px-4 py-2 text-left">Class</th>
                    <th className="px-4 py-2 text-left">Group</th>
                    <th className="px-4 py-2 text-left">Average Score</th>
                    <th className="px-4 py-2 text-left">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredStudents.map((student) => (
                    <tr key={student.id} className="border-b">
                      <td className="px-4 py-2">{student.name}</td>
                      <td className="px-4 py-2">{student.grade}</td>
                      <td className="px-4 py-2">{student.class}</td>
                      <td className="px-4 py-2">{student.group || 'N/A'}</td>
                      <td className="px-4 py-2">{student.averageScore}</td>
                      <td className="px-4 py-2">
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="outline" size="sm">View Details</Button>
                          </DialogTrigger>
                          <DialogContent>
                            <DialogHeader>
                              <DialogTitle>{student.name}'s Performance</DialogTitle>
                              <DialogDescription>Detailed view of student's scores</DialogDescription>
                            </DialogHeader>
                            <div className="mt-4">
                              <h4 className="font-semibold mb-2">Subject Scores:</h4>
                              {Object.entries(student.subjects).map(([subject, score]) => (
                                <div key={subject} className="flex justify-between items-center mb-2">
                                  <span>{subject}:</span>
                                  <Badge variant={score >= 80 ? "success" : score >= 70 ? "warning" : "destructive"}>
                                    {score}
                                  </Badge>
                                </div>
                              ))}
                            </div>
                          </DialogContent>
                        </Dialog>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </ScrollArea>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

