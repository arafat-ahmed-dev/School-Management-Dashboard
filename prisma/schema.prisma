generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String // Ensure this line is included
  username     String   @unique
  password     String   @unique
  email        String   @unique
  phone        String?
  refreshToken String?
  approved     Approve? @default(PENDING)
  createdAt    DateTime @default(now())
}

model Student {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  username      String       @unique
  password      String
  name          String
  Parent        Parent?      @relation(fields: [parentId], references: [id])
  parentId      String?      @db.ObjectId
  email         String       @unique
  parentContact String?
  phone         String?
  address       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  img           String?
  bloodType     String?
  sex           UserSex?
  birthDate     DateTime?
  gradeId       String?      @db.ObjectId
  grade         Grade?       @relation(fields: [gradeId], references: [id])
  classId       String?      @db.ObjectId
  class         Class?       @relation(fields: [classId], references: [id])
  subjectId     String?      @db.ObjectId
  subject       Subject?     @relation(fields: [subjectId], references: [id])
  attendances   Attendance[]
  result        Result[]
  refreshToken  String?
  approved      Approve?     @default(PENDING)
}

model Teacher {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  password     String
  name         String
  email        String    @unique
  phone        String?   @unique
  address      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  img          String?
  subjectsId   String[]  @db.ObjectId
  subjects     Subject[] @relation(fields: [subjectsId], references: [id])
  lessons      Lesson[]
  bloodType    String?
  birthday     DateTime?
  classes      Class[]
  sex          UserSex?
  refreshToken String?
  approved     Approve?  @default(PENDING)
}

model Parent {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  username     String      @unique
  password     String
  name         String
  email        String?     @unique
  phone        String?     @unique
  address      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  img          String?
  students     Student[]
  type         ParentType?
  refreshToken String?
  approved     Approve?    @default(PENDING)
}

model Class {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  gradeId       String         @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisorId  String?        @db.ObjectId
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  students      Student[]
  lessons       Lesson[]
  capacity      Int
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  code       String
  subjectId  String    @unique
  teachersId String[]  @db.ObjectId
  teachers   Teacher[] @relation(fields: [teachersId], references: [id])
  lessons    Lesson[]
  Student    Student[]
}

model Lesson {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   String       @db.ObjectId
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId String   @db.ObjectId
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Grade {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId String   @db.ObjectId
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  examId       String?     @db.ObjectId
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String?     @db.ObjectId
  student      Student?    @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  present   Boolean
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId String? @db.ObjectId
  class   Class?  @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime

  classId String? @db.ObjectId
  class   Class?  @relation(fields: [classId], references: [id])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @map("user_id")
  userType     String // "Admin", "Student", "Teacher", "Parent"
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum UserSex {
  MALE
  FEMALE
}

enum ParentType {
  FATHER
  MOTHER
  OTHER
}

enum Approve {
  PENDING
  ACCEPTED
  CANCEL
}
